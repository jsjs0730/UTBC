<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    <mapper namespace="ga.newspbn.mapper.ReplyMapper">
       	<!-- 부모 댓글 -->
       	<insert id="create">
       		<![CDATA[
       		insert into tbl_reply (bnum, replytext, replyer, idx)
			values (#{bnum}, #{replytext}, #{replyer}, last_insert_id); 
			]]>	
    	</insert> 
    	  
    	<select id="chkDepth" resultType="string" >
    	<!-- 간단하다
    			vo로 날아온 depth를 받아서 같은 값이 있으면 최대값 +1 을 하여 반환
    			없으면 null
    	 -->
 			select substring_index(depth, '@', -1)+1 from tbl_reply a where depth =
			(select max(depth) from tbl_reply a where length(depth)
			 = (select length(depth) from tbl_reply where depth = #{depth} and  
			 (select (char_length(depth) - char_length(replace(depth, '@', '')))/char_length('@')
						 from tbl_reply a
			   where depth = #{depth})>0
 			));
    	</select>
    	

		<!-- 대댓글 -->
		<insert id="createReReply">
			<!--
				*selectKey를 사용하려고 했으나 불필요한 sql문만 많아지고 가독성도 좋지 않아서
				dao를 만들고 확인해서 변환까지 해주는 녀석(chkDepth)을 만들어서 vo에 담아 전송하겠다.
			
			 <selectKey resultType="string" keyProperty="depth" order="BEFORE">
				가져온 depth 번호에 @가 있는지 없는지 확인한다.			
       			select if((select (char_length(depth) - char_length(replace(depth, '@', '')))/char_length('@')
			 	  from tbl_reply a
			  		 where depth = #{depth})>0, 
			   	 있으면 맨마지막 @뒤에 숫자를 1증가, 
			  	 (select substring_index(depth, '@', -1)+1 from tbl_reply a where depth = #{depth}),
			  	 없어서 맨마지막에 @뒤에 숫자를 붙이는 것 까지는 좋았다.
			   	 (select concat(#{depth},'@', select depth(substring_index(depth, '@', -1)+1) from tbl_reply a)       			
	 		</selectKey> -->
			insert into tbl_reply(bnum, replytext, replyer, idx, depth)
			values (
			 #{bnum},
			 #{replytext},
			 #{replyer},
			 (select max(idx)+1 from tbl_reply a),
			 #{depth});
		</insert>
		
		<!-- 목록 -->
    	<select id="listPage" resultType="ReplyVO">
			select * from tbl_reply
			where bnum=#{bnum}
			order by depth    
			limit #{cri.pageStart}, #{cri.perPageNum}	
    	</select>

		<!-- 수정 -->
    	<update id="update">
			update tbl_reply set replytext = #{replytext} , updatedate=now()
			where rnum=#{rnum}    	
    	</update>
    	
    	<!-- 삭제 -->    	
    	<delete id="delete">
			delete from tbl_reply where rnum=#{rnum}    	
    	</delete>
   
		<!-- 댓글수(페이징용) -->
    	<select id="count" resultType="int">
    	<!-- 트랜잭션이 걸리는 시점부터는 tbl_board만을 이용해서 처리해야한다 -->
			select count(bnum) from tbl_reply where bnum=#{bnum}
			<!-- update tbl_board set replycnt = 
				(select count(rnum)
					from
					tbl_reply
					where bnum = tbl_board.bnum) where bnum > 0; -->
			
    	</select>
    	<!-- 댓글수(게시판표시용) -->
    	<select id="getBnum" resultType="int">
    		select bnum from tbl_reply where rnum = #{rnum}    	
    	</select> 	
    </mapper>